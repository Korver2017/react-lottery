[{"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js":"1","C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js":"2","C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\employees\\Employees.js":"4","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js":"5","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js":"6","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js":"7","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\employees\\Employees.js":"8","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\AddEmployeeModal.js":"9","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\EditEmployeeModal.js":"10","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\DeleteEmployeeModal.js":"11","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Prizes.js":"12","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Header.js":"13"},{"size":624,"mtime":1612034986658,"results":"14","hashOfConfig":"15"},{"size":869,"mtime":1612035487093,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1611280843184,"results":"17","hashOfConfig":"15"},{"size":3932,"mtime":1612035487094,"results":"18","hashOfConfig":"15"},{"size":827,"mtime":1615823696436,"results":"19","hashOfConfig":"20"},{"size":920,"mtime":1616373371525,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1613409601397,"results":"22","hashOfConfig":"20"},{"size":4371,"mtime":1616369088952,"results":"23","hashOfConfig":"20"},{"size":5815,"mtime":1616365988171,"results":"24","hashOfConfig":"20"},{"size":6068,"mtime":1616366382509,"results":"25","hashOfConfig":"20"},{"size":3217,"mtime":1616366365753,"results":"26","hashOfConfig":"20"},{"size":94,"mtime":1616367977386,"results":"27","hashOfConfig":"20"},{"size":1431,"mtime":1616373322172,"results":"28","hashOfConfig":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1thhyc2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"129a7ln",{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js",[],"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js",[],"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js",[],["59","60"],"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\employees\\Employees.js",["61"],"// React & Component\r\nimport { useState, useEffect } from 'react';\r\nimport './Employees.css';\r\nimport EmployeeEditModal from '../modal/EmployeeEditModal/EmployeeEditModal';\r\nimport EmployeeDeleteModal from '../modal/EmployeeDeleteModal/EmployeeDeleteModal';\r\n\r\n// JavaScript Plugin\r\nimport $api from 'axios';\r\nimport rq from 'random-quotes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// CSS Framework\r\nimport { Card } from 'react-bootstrap';\r\n\r\nfunction Employees(props) {\r\n\r\n  const [employees, setEmployees] = useState([]);\r\n  const [triggerModalCount, setTriggerModalCount] = useState(0);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [editTarget, setEditTarget] = useState({});\r\n\r\n  // Show modal & pass selected employee data to modal.\r\n  const handleEditModalData = (dataset, i) => {\r\n\r\n    setEditTarget ({...dataset.employee, order: i});\r\n\r\n    // Trigger direct type of children show or hide modal by update trigger count.\r\n    setTriggerModalCount(triggerModalCount + 1);\r\n    setModalType(dataset.type);\r\n  };\r\n\r\n  // Update selected employee's data.\r\n  const handleEditEmployee = (editedEmployee) => {\r\n\r\n    const pos = editTarget.order;\r\n\r\n    setEmployees(prevEmployees => {\r\n\r\n      prevEmployees[pos].name = editedEmployee.name;\r\n      prevEmployees[pos].quote = editedEmployee.quote;\r\n\r\n      const updatedEmployees = [...prevEmployees];\r\n      return updatedEmployees;\r\n    });\r\n  };\r\n\r\n  // Delete selected employee's data.\r\n  const handleDeleteEmployee = () => {\r\n\r\n    const pos = editTarget.order;\r\n\r\n    setEmployees(prevEmployees => {\r\n\r\n      prevEmployees.splice (pos, 1);\r\n\r\n      const updatedEmployees = [...prevEmployees];\r\n      return updatedEmployees;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    // Retrieve (initialize) employees' data.\r\n    $api.get('https://randomuser.me/api/?results=10')\r\n      .then (res => {\r\n        \r\n        const cleanSource = [...res.data.results];\r\n        const employeeList = cleanSource.map(employee => {\r\n          return {name: employee.name, quote: rq().body, id: uuidv4()};\r\n        });\r\n        \r\n        setEmployees(employeeList);\r\n      });\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n\r\n  //   if (! props.addedEmployee)\r\n  //     return;\r\n\r\n  //   setEmployees ([...employees, props.addedEmployee]);\r\n\r\n  // }, [props.addedEmployee]);\r\n  \r\n  return (\r\n    <div className=\"employees\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          {\r\n            employees.map((employee, i) => (\r\n              <Card\r\n              bg=\"light\"\r\n              key={employee.id}\r\n              text=\"dark\"\r\n              className='mb-2 position-relative'\r\n              >\r\n                <Card.Header className=\"font-weight-bold\">{employee.name.first} { employee.name.last}</Card.Header>\r\n                <Card.Body>\r\n                  <Card.Text className=\"font-weight-bold\">\r\n                    My Declaration to Win The Prize:\r\n                  </Card.Text>\r\n                  <Card.Text className=\"text-left\">\r\n                    {employee.quote}\r\n                  </Card.Text>\r\n                </Card.Body>\r\n\r\n                <div className=\"editor position-absolute\">\r\n                  <i onClick={() => handleEditModalData({employee, type: 'edit'}, i)} className=\"fas fa-edit edit\"></i>\r\n                  <i onClick={() => handleEditModalData({employee, type: 'delete'}, i)} className=\"fas fa-trash trash\"></i>\r\n                </div>\r\n              </Card>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n      <EmployeeEditModal triggerModalCount={triggerModalCount} modalType={modalType} editTarget={editTarget} handleEditEmployee={handleEditEmployee}></EmployeeEditModal>\r\n      <EmployeeDeleteModal triggerModalCount={triggerModalCount} modalType={modalType} editTarget={editTarget} handleDeleteEmployee={handleDeleteEmployee}></EmployeeDeleteModal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Employees;\r\n","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js",[],["62","63"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js",["64","65"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\employees\\Employees.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\AddEmployeeModal.js",["66","67"],"/**\r\n *\r\n * JavaScript Plugin\r\n *\r\n */\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n/**\r\n *\r\n * React & Components\r\n *\r\n */\r\nimport { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n\r\n/**\r\n *\r\n * Styles Settings\r\n *\r\n */\r\nconst useStyles = makeStyles (theme => ({\r\n  form: {\r\n    margin: theme.spacing (1),\r\n  },\r\n  textInput: {\r\n    width: 200,\r\n    margin: theme.spacing (1),\r\n  },\r\n  buttonGroup: {\r\n    marginBottom: theme.spacing (2),\r\n    marginRight: theme.spacing (3),\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    borderColor: theme.palette.error.main,\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    borderColor: theme.palette.success.main,\r\n  }\r\n}));\r\n\r\n\r\n/**\r\n *\r\n * Employee Add Modal\r\n *\r\n */\r\nfunction EmployeeAddModal ({showModal, handleToggleModal, handleAddEmployee}) {\r\n\r\n  // Apply styles.\r\n  const classes = useStyles ();\r\n  const theme = useTheme ();\r\n  const fullScreen = useMediaQuery (theme.breakpoints.down ('sm'));\r\n\r\n  // Initialize employee's data to be added.\r\n  const [first, setFirst] = useState ('');\r\n  const [last, setLast] = useState ('');\r\n  const [quote, setQuote] = useState ('');\r\n\r\n  // State of watching input columns.\r\n  const [watchInput, setWatchInput] = useState (false);\r\n\r\n  // State of deny submit.\r\n  const [denyUpdate, setDenyUpdate] = useState (true);\r\n\r\n\r\n  /**\r\n   *\r\n   * Check input columns to confirm submit\r\n   *\r\n   */\r\n  const checkInput = () => {\r\n    \r\n    // Any empty input, deny submit.\r\n    if (! first.trim () || ! last.trim () || ! quote.trim ())\r\n      return setDenyUpdate (true);\r\n\r\n    else\r\n      return setDenyUpdate (false);\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Check Input Columns\r\n   *\r\n   */\r\n  useEffect (() => {\r\n\r\n    // When columns changed, check input.\r\n    checkInput ();\r\n  }, [first, last, quote]);\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Update Employee\r\n   *\r\n   */\r\n  const handleUpdateEmployee = () => {\r\n\r\n    // Trigger watching input after deny submit.\r\n    if (denyUpdate)\r\n      return setWatchInput (true);\r\n\r\n    // Add new employee.\r\n    handleAddEmployee ({name: {first, last}, quote, id: uuidv4 ()});\r\n\r\n    // Close modal.\r\n    handleCloseModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Reset Data When Closing Modal\r\n   *\r\n   */\r\n  const handleCloseModal = () => {\r\n\r\n    // Reset inputs.\r\n    setFirst ('');\r\n    setLast ('');\r\n    setQuote ('');\r\n\r\n    // Reset watcher & deny state.\r\n    setWatchInput (false);\r\n    setDenyUpdate (true);\r\n\r\n    // Close modal.\r\n    handleToggleModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Input Change\r\n   *\r\n   */\r\n  const handleInputChange = (e, column) => {\r\n\r\n    // Watching column, give it a new value.\r\n    switch (column) {\r\n\r\n      case 'first':\r\n        return setFirst (e.target.value);\r\n\r\n      case 'last':\r\n        return setLast (e.target.value);\r\n\r\n      case 'quote':\r\n        return setQuote (e.target.value);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * JSX\r\n   *\r\n   */\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={showModal}\r\n      onClose={handleCloseModal}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n    >\r\n      \r\n      <DialogTitle id=\"responsive-dialog-title\">\r\n        Add New Employee\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <DialogContentText component={'span'}>\r\n          \r\n          <form noValidate autoComplete=\"off\">\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'first')}}\r\n                error={watchInput && ! first.trim ()}\r\n                className={classes.textInput}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"First Name\"\r\n                helperText={watchInput && ! first.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'last')}}\r\n                className={classes.textInput}\r\n                error={watchInput && ! last.trim ()}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"Last Name\"\r\n                helperText={watchInput && ! last.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n\r\n          <form className={classes.form}>\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'quote')}}\r\n                error={watchInput && ! quote.trim ()}\r\n                fullWidth\r\n                id=\"outlined-multiline-static\"\r\n                label=\"My Declaration\"\r\n                multiline\r\n                rows={4}\r\n                helperText={watchInput && ! quote.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n\r\n      <DialogActions className={classes.buttonGroup}>\r\n        <Button className={classes.success} onClick={handleUpdateEmployee} variant=\"outlined\" color=\"primary\">\r\n          Add\r\n        </Button>\r\n\r\n        <Button className={classes.error} onClick={handleCloseModal} variant=\"outlined\" color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n};\r\n\r\nexport default EmployeeAddModal;\r\n","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\EditEmployeeModal.js",["68","69"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\DeleteEmployeeModal.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Prizes.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Header.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":83,"column":6,"nodeType":"76","endLine":83,"endColumn":21,"suggestions":"77"},{"ruleId":"70","replacedBy":"78"},{"ruleId":"72","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":4,"column":8,"nodeType":"82","messageId":"83","endLine":4,"endColumn":17},{"ruleId":"80","severity":1,"message":"84","line":11,"column":10,"nodeType":"82","messageId":"83","endLine":11,"endColumn":23},{"ruleId":"74","severity":1,"message":"85","line":103,"column":6,"nodeType":"76","endLine":103,"endColumn":26,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":154,"column":5,"nodeType":"89","messageId":"90","endLine":164,"endColumn":6},{"ruleId":"74","severity":1,"message":"85","line":125,"column":6,"nodeType":"76","endLine":125,"endColumn":26,"suggestions":"91"},{"ruleId":"87","severity":1,"message":"88","line":136,"column":5,"nodeType":"89","messageId":"90","endLine":146,"endColumn":6},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'employees'. Either include it or remove the dependency array. You can also do a functional update 'setEmployees(e => ...)' if you only need 'employees' in the 'setEmployees' call.","ArrayExpression",["94"],["92"],["93"],"no-unused-vars","'Employees' is defined but never used.","Identifier","unusedVar","'addedEmployee' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkInput'. Either include it or remove the dependency array.",["95"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"99","fix":"101"},"Update the dependencies array to be: [addedEmployee, employees]",{"range":"102","text":"103"},"Update the dependencies array to be: [checkInput, first, last, quote]",{"range":"104","text":"105"},{"range":"106","text":"105"},[2304,2319],"[addedEmployee, employees]",[2305,2325],"[checkInput, first, last, quote]",[2723,2743]]