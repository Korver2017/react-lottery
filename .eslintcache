[{"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js":"1","C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js":"2","C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js":"4","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js":"5","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js":"6","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\AddEmployeeModal.js":"7","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\EditEmployeeModal.js":"8","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\DeleteEmployeeModal.js":"9","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\const.js":"10","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\views\\Employees.js":"11","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\views\\Prizes.js":"12","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\views\\Header.js":"13","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Prize.js":"14"},{"size":624,"mtime":1612034986658,"results":"15","hashOfConfig":"16"},{"size":869,"mtime":1612035487093,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1611280843184,"results":"18","hashOfConfig":"16"},{"size":827,"mtime":1615823696436,"results":"19","hashOfConfig":"20"},{"size":533,"mtime":1617373125959,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1613409601397,"results":"22","hashOfConfig":"20"},{"size":5884,"mtime":1616383115987,"results":"23","hashOfConfig":"20"},{"size":6068,"mtime":1616383050616,"results":"24","hashOfConfig":"20"},{"size":3217,"mtime":1616366365753,"results":"25","hashOfConfig":"20"},{"size":636,"mtime":1617372549997,"results":"26","hashOfConfig":"20"},{"size":6554,"mtime":1617373125985,"results":"27","hashOfConfig":"20"},{"size":2186,"mtime":1617375503206,"results":"28","hashOfConfig":"20"},{"size":1872,"mtime":1617373125984,"results":"29","hashOfConfig":"20"},{"size":3553,"mtime":1617375583543,"results":"30","hashOfConfig":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1thhyc2",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"129a7ln",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js",[],"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js",[],"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js",[],["64","65"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js",[],["66","67"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\AddEmployeeModal.js",["68","69"],"/**\r\n *\r\n * JavaScript Plugin\r\n *\r\n */\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n/**\r\n *\r\n * React & Components\r\n *\r\n */\r\nimport { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n\r\n/**\r\n *\r\n * Styles Settings\r\n *\r\n */\r\nconst useStyles = makeStyles (theme => ({\r\n  form: {\r\n    margin: theme.spacing (1),\r\n  },\r\n  textInput: {\r\n    width: 200,\r\n    margin: theme.spacing (1),\r\n  },\r\n  buttonGroup: {\r\n    marginBottom: theme.spacing (2),\r\n    marginRight: theme.spacing (3),\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    borderColor: theme.palette.error.main,\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    borderColor: theme.palette.success.main,\r\n  }\r\n}));\r\n\r\n\r\n/**\r\n *\r\n * Employee Add Modal\r\n *\r\n */\r\nfunction EmployeeAddModal ({showModal, handleToggleModal, handleAddEmployee}) {\r\n\r\n  // Apply styles.\r\n  const classes = useStyles ();\r\n  const theme = useTheme ();\r\n  const fullScreen = useMediaQuery (theme.breakpoints.down ('sm'));\r\n\r\n  // Initialize employee's data to be added.\r\n  const [first, setFirst] = useState ('');\r\n  const [last, setLast] = useState ('');\r\n  const [quote, setQuote] = useState ('');\r\n\r\n  // State of watching input columns.\r\n  const [watchInput, setWatchInput] = useState (false);\r\n\r\n  // State of deny submit.\r\n  const [denyUpdate, setDenyUpdate] = useState (true);\r\n\r\n\r\n  /**\r\n   *\r\n   * Check input columns to confirm submit\r\n   *\r\n   */\r\n  const checkInput = () => {\r\n    \r\n    // Any empty input, deny submit.\r\n    if (! first.trim () || ! last.trim () || ! quote.trim ())\r\n      return setDenyUpdate (true);\r\n\r\n    else\r\n      return setDenyUpdate (false);\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Check Input Columns\r\n   *\r\n   */\r\n  useEffect (() => {\r\n\r\n    // When columns changed, check input.\r\n    checkInput ();\r\n  }, [first, last, quote]);\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Update Employee\r\n   *\r\n   */\r\n  const handleUpdateEmployee = () => {\r\n\r\n    // Trigger watching input after deny submit.\r\n    if (denyUpdate)\r\n      return setWatchInput (true);\r\n\r\n    // Add new employee.\r\n    handleAddEmployee ({name: {first, last}, quote, id: uuidv4 ()});\r\n\r\n    // Close modal.\r\n    handleCloseModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Reset Data When Closing Modal\r\n   *\r\n   */\r\n  const handleCloseModal = () => {\r\n\r\n    // Reset inputs.\r\n    setFirst ('');\r\n    setLast ('');\r\n    setQuote ('');\r\n\r\n    // Reset watcher & deny state.\r\n    setWatchInput (false);\r\n    setDenyUpdate (true);\r\n\r\n    // Close modal.\r\n    handleToggleModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Input Change\r\n   *\r\n   */\r\n  const handleInputChange = (e, column) => {\r\n\r\n    // Watching column, give it a new value.\r\n    switch (column) {\r\n\r\n      case 'first':\r\n        return setFirst (e.target.value);\r\n\r\n      case 'last':\r\n        return setLast (e.target.value);\r\n\r\n      case 'quote':\r\n        return setQuote (e.target.value);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * JSX\r\n   *\r\n   */\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={showModal}\r\n      onClose={handleCloseModal}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n    >\r\n      \r\n      <DialogTitle id=\"responsive-dialog-title\">\r\n        Add New Employee\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <DialogContentText component={'span'}>\r\n          \r\n          <form noValidate autoComplete=\"off\">\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'first')}}\r\n                error={watchInput && ! first.trim ()}\r\n                className={classes.textInput}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"First Name\"\r\n                helperText={watchInput && ! first.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'last')}}\r\n                className={classes.textInput}\r\n                error={watchInput && ! last.trim ()}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"Last Name\"\r\n                helperText={watchInput && ! last.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n\r\n          <form className={classes.form}>\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'quote')}}\r\n                error={watchInput && ! quote.trim ()}\r\n                fullWidth\r\n                id=\"outlined-multiline-static\"\r\n                label=\"My Declaration\"\r\n                multiline\r\n                rows={4}\r\n                helperText={watchInput && ! quote.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n\r\n      <DialogActions className={classes.buttonGroup}>\r\n        <Button className={classes.success} onClick={handleUpdateEmployee} variant=\"outlined\" color=\"primary\">\r\n          Add\r\n        </Button>\r\n\r\n        <Button className={classes.error} onClick={handleCloseModal} variant=\"outlined\" color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n};\r\n\r\nexport default EmployeeAddModal;\r\n","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\EditEmployeeModal.js",["70","71"],"/**\r\n *\r\n * React & Components\r\n *\r\n */\r\nimport { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n\r\n/**\r\n *\r\n * Styles Settings\r\n *\r\n */\r\nconst useStyles = makeStyles (theme => ({\r\n  form: {\r\n    margin: theme.spacing (1),\r\n  },\r\n  textInput: {\r\n    width: 200,\r\n    margin: theme.spacing (1),\r\n  },\r\n  buttonGroup: {\r\n    marginBottom: theme.spacing (2),\r\n    marginRight: theme.spacing (3),\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    borderColor: theme.palette.error.main,\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    borderColor: theme.palette.success.main,\r\n  }\r\n}));\r\n\r\n\r\n/**\r\n *\r\n * Employee Edit Modal Component\r\n *\r\n */\r\nfunction EditEmployeeModal ({target, handleEditEmployee}) {\r\n\r\n  // Apply styles.\r\n  const classes = useStyles ();\r\n  const theme = useTheme ();\r\n  const fullScreen = useMediaQuery (theme.breakpoints.down ('sm'));\r\n  \r\n  // State of open modal.\r\n  const [open, setOpen] = useState (false);\r\n\r\n  // Initialize employee's data to be edited.\r\n  const [first, setFirst] = useState ('');\r\n  const [last, setLast] = useState ('');\r\n  const [quote, setQuote] = useState ('');\r\n\r\n  // State of deny submit.\r\n  const [denyUpdate, setDenyUpdate] = useState (false);\r\n\r\n\r\n  /**\r\n   *\r\n   * Check input columns to confirm submit\r\n   *\r\n   */\r\n  const checkInput = () => {\r\n    \r\n    // Any empty input, deny submit.\r\n    if (! first.trim () || ! last.trim () || ! quote.trim ())\r\n      return setDenyUpdate (true);\r\n\r\n    else\r\n      return setDenyUpdate (false);\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Close Modal\r\n   *\r\n   */\r\n  const handleCloseModal = () => setOpen (false);\r\n\r\n\r\n  /**\r\n   *\r\n   * Initialize Modal Component\r\n   *\r\n   */\r\n  useEffect (() => {\r\n    \r\n    // Check target employee's data to show modal.\r\n    if (Object.keys (target).length <= 0)\r\n      return;\r\n\r\n    // Set up employee props data, then show lightbox.\r\n    setFirst (target.name.first);\r\n    setLast (target.name.last);\r\n    setQuote (target.quote);\r\n\r\n    // Open modal.\r\n    setOpen (true);\r\n    \r\n  }, [target]);\r\n\r\n\r\n  /**\r\n   *\r\n   * Check Input Columns\r\n   *\r\n   */\r\n  useEffect (() => {\r\n\r\n    // When columns changed, check input.\r\n    checkInput ();\r\n  }, [first, last, quote]);\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Input Change\r\n   *\r\n   */\r\n  const handleInputChange = (e, column) => {\r\n\r\n    // Watching column, give it a new value.\r\n    switch (column) {\r\n\r\n      case 'first':\r\n        return setFirst (e.target.value);\r\n\r\n      case 'last':\r\n        return setLast (e.target.value);\r\n\r\n      case 'quote':\r\n        return setQuote (e.target.value);\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   *\r\n   * Handle Update Employee\r\n   *\r\n   */\r\n  const handleUpdateEmployee = () => {\r\n\r\n    // Before submit, check deny or not.\r\n    if (denyUpdate)\r\n      return;\r\n    \r\n    // Submit new values.\r\n    handleEditEmployee ({name: {first, last,}, quote});\r\n\r\n    // Close modal.\r\n    handleCloseModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * JSX\r\n   *\r\n   */\r\n\r\n  // Render component after getting target employee's data.\r\n  if (Object.keys (target).length <= 0)\r\n    return <></>\r\n    \r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={open}\r\n      onClose={handleCloseModal}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n    >\r\n      \r\n      <DialogTitle id=\"responsive-dialog-title\">\r\n        {target.name.first + ' ' + target.name.last}\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <DialogContentText component={'span'}>\r\n          \r\n          <form noValidate autoComplete=\"off\">\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'first')}}\r\n                error={! first.trim ()}\r\n                className={classes.textInput}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"First Name\"\r\n                defaultValue={first}\r\n                helperText={! first.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'last')}}\r\n                className={classes.textInput}\r\n                error={! last.trim ()}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"Last Name\"\r\n                defaultValue={last}\r\n                helperText={! last.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n\r\n          <form className={classes.form}>\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'quote')}}\r\n                error={! quote.trim ()}\r\n                fullWidth\r\n                id=\"outlined-multiline-static\"\r\n                label=\"My Declaration\"\r\n                multiline\r\n                rows={4}\r\n                defaultValue={quote}\r\n                helperText={! quote.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n\r\n      <DialogActions className={classes.buttonGroup}>\r\n        <Button className={classes.success} autoFocus onClick={handleUpdateEmployee} disabled={denyUpdate} variant=\"outlined\">\r\n          Update\r\n        </Button>\r\n        \r\n        <Button className={classes.error} onClick={handleCloseModal} variant=\"outlined\" autoFocus>\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default EditEmployeeModal;\r\n","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\DeleteEmployeeModal.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\const.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\views\\Employees.js",["72"],"/**\r\n *\r\n * JavaScript Plugins\r\n *\r\n */\r\nimport $api from 'axios';\r\nimport rq from 'random-quotes';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n/**\r\n *\r\n * React & Material UI\r\n *\r\n */\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useState, useEffect } from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CreateRoundedIcon from '@material-ui/icons/CreateRounded';\r\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\r\n\r\n\r\n/**\r\n *\r\n * Components\r\n *\r\n */\r\nimport AddEmployeeModal from '../components/modal/AddEmployeeModal';\r\nimport EditEmployeeModal from '../components/modal/EditEmployeeModal';\r\nimport DeleteEmployeeModal from '../components/modal/DeleteEmployeeModal';\r\n\r\n\r\n/**\r\n *\r\n * Material UI Style\r\n *\r\n */\r\nconst useStyles = makeStyles (theme => ({\r\n  root: {\r\n    marginTop: theme.spacing (3),\r\n    paddingBottom: theme.spacing (3),\r\n  },\r\n  gutter: {\r\n    padding: theme.spacing (2),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    position: 'relative',\r\n    backgroundColor: '#2A3042',\r\n    color: '#a6b0cf',\r\n  },\r\n  content: {\r\n    '& p': {\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n    },\r\n    '& div': {\r\n      marginBottom: theme.spacing (7),\r\n    }\r\n  },\r\n  buttons: {\r\n    textAlign: 'right',\r\n    position: 'absolute',\r\n    bottom: theme.spacing (1),\r\n    right: theme.spacing (1),\r\n    '& button': {\r\n      color: '#a6b0cf',\r\n    },\r\n    '& button:hover': {\r\n      color: '#fff',\r\n    }\r\n  },\r\n  addEmployee: {\r\n    position: 'fixed',\r\n    bottom: '50px',\r\n    right: '50px',\r\n    fontSize: '40px',\r\n    transition: 'transform .2s',\r\n    color: '#a6b0cf',\r\n    '&:hover': {\r\n      cursor: 'pointer',\r\n      transform: 'scale(1.3)',\r\n      color: '#fff',\r\n    }\r\n  }\r\n}));\r\n\r\n\r\n/**\r\n *\r\n * Employees\r\n *\r\n */\r\nconst Employees = () => {\r\n\r\n  // Apply styles.\r\n  const classes = useStyles ();\r\n\r\n  // State of employees.\r\n  const [employees, setEmployees] = useState ([]);\r\n\r\n  // State of open AddEmployeeModal.\r\n  const [openAddEmployeeModal, setOpenAddEmployeeModal] = useState (false);\r\n\r\n  // State of employee will be updated.\r\n  const [addEmployee, setAddEmployee] = useState ({});\r\n  const [editEmployee, setEditEmployee] = useState ({});\r\n  const [deleteEmployee, setDeleteEmployee] = useState ({});\r\n\r\n\r\n  /**\r\n   *\r\n   * Open & Pass Employee Data to Edit Employee Modal\r\n   *\r\n   */\r\n  const handleEditModalData = (employee, i) => {\r\n    return setEditEmployee ({...employee, order: i});\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Open & Pass Employee Data to Delete Employee Modal\r\n   *\r\n   */\r\n  const handleDeleteModalData = (employee, i) => {\r\n    return setDeleteEmployee ({...employee, order: i});\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Open / Hide Add Employee Modal\r\n   *\r\n   */\r\n  const handleToggleModal = () => {\r\n    return setOpenAddEmployeeModal (prevState => ! prevState);\r\n  }\r\n  \r\n\r\n  /**\r\n   *\r\n   * Handle Add New Employee\r\n   *\r\n   */\r\n  const handleAddEmployee = (addEmployee) => setAddEmployee (addEmployee);\r\n\r\n\r\n  /**\r\n   *\r\n   * Update Selected Employee's Data\r\n   *\r\n   */\r\n  const handleEditEmployee = (editedEmployee) => {\r\n\r\n    const pos = editEmployee.order;\r\n\r\n    // Update employee data.\r\n    setEmployees (prevEmployees => {\r\n\r\n      prevEmployees[pos].name = editedEmployee.name;\r\n      prevEmployees[pos].quote = editedEmployee.quote;\r\n\r\n      const updatedEmployees = [...prevEmployees];\r\n      return updatedEmployees;\r\n    });\r\n  };\r\n\r\n\r\n  /**\r\n   *\r\n   * Delete Selected Employee's Data\r\n   *\r\n   */\r\n  const handleDeleteEmployee = () => {\r\n\r\n    const pos = editEmployee.order;\r\n\r\n    // Update employee data.\r\n    setEmployees (prevEmployees => {\r\n\r\n      prevEmployees.splice (pos, 1);\r\n\r\n      const updatedEmployees = [...prevEmployees];\r\n      return updatedEmployees;\r\n    });\r\n  };\r\n\r\n\r\n  /**\r\n   *\r\n   * Initialize Employees\r\n   *\r\n   */\r\n  useEffect(() => {\r\n\r\n    // Retrieve employees' data.\r\n    $api.get ('https://randomuser.me/api/?results=10')\r\n      .then (res => {\r\n        \r\n        // Parsing data.\r\n        const cleanSource = [...res.data.results];\r\n        const employeeList = cleanSource.map (employee => {\r\n          return {name: employee.name, quote: rq ().body, id: uuidv4 ()};\r\n        });\r\n        \r\n        setEmployees (employeeList);\r\n      });\r\n  }, []);\r\n\r\n\r\n  /**\r\n   *\r\n   * Add New Employee\r\n   *\r\n   */\r\n  useEffect (() => {\r\n\r\n    // Return when component just initialized.\r\n    if (Object.keys (addEmployee).length <= 0) \r\n      return;\r\n\r\n    setEmployees ([...employees, addEmployee]);\r\n\r\n  }, [addEmployee]);\r\n  \r\n\r\n  /**\r\n   *\r\n   * JSX\r\n   *\r\n   */\r\n  return (\r\n    <div className=\"employees\">\r\n      <Grid container className={classes.root}>\r\n        {\r\n          employees.map ((employee, i) => (\r\n            <Grid key={employee.id} className={classes.gutter} item xs={3}>\r\n\r\n              <Card className={classes.card}>\r\n\r\n                <CardHeader title={employee.name.first + ' ' + employee.name.last} />\r\n                <Divider variant=\"middle\" />\r\n\r\n                <CardContent className={classes.content}>\r\n                  <p className={classes.subtitle}>My Declaration to <br /> Win The Prize:</p>\r\n                  <Box>{employee.quote}</Box>\r\n                </CardContent>\r\n\r\n                <Box className={classes.buttons}>\r\n                  <IconButton onClick={() => handleEditModalData (employee, i)}>\r\n                    <CreateRoundedIcon />\r\n                  </IconButton>\r\n\r\n                  <IconButton onClick={() => handleDeleteModalData (employee, i)}>\r\n                    <DeleteForeverRoundedIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              </Card>\r\n              \r\n            </Grid>\r\n          ))\r\n        }\r\n\r\n        <Box onClick={handleToggleModal} className={`${classes.addEmployee} plus fas fa-plus-circle`} />\r\n      </Grid>\r\n\r\n      <AddEmployeeModal open={openAddEmployeeModal} handleToggleModal={handleToggleModal} handleAddEmployee={handleAddEmployee} />\r\n\r\n      <EditEmployeeModal target={editEmployee} handleEditEmployee={handleEditEmployee} />\r\n\r\n      <DeleteEmployeeModal target={deleteEmployee} handleDeleteEmployee={handleDeleteEmployee} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Employees;\r\n","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\views\\Prizes.js",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\views\\Header.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Prize.js",["89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":106,"column":6,"nodeType":"98","endLine":106,"endColumn":26,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":157,"column":5,"nodeType":"102","messageId":"103","endLine":167,"endColumn":6},{"ruleId":"96","severity":1,"message":"97","line":125,"column":6,"nodeType":"98","endLine":125,"endColumn":26,"suggestions":"104"},{"ruleId":"100","severity":1,"message":"101","line":136,"column":5,"nodeType":"102","messageId":"103","endLine":146,"endColumn":6},{"ruleId":"96","severity":1,"message":"105","line":231,"column":6,"nodeType":"98","endLine":231,"endColumn":19,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":3,"column":8,"nodeType":"109","messageId":"110","endLine":3,"endColumn":12},{"ruleId":"107","severity":1,"message":"111","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":12},{"ruleId":"107","severity":1,"message":"112","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":18},{"ruleId":"107","severity":1,"message":"113","line":7,"column":8,"nodeType":"109","messageId":"110","endLine":7,"endColumn":17},{"ruleId":"107","severity":1,"message":"114","line":8,"column":8,"nodeType":"109","messageId":"110","endLine":8,"endColumn":19},{"ruleId":"107","severity":1,"message":"115","line":9,"column":8,"nodeType":"109","messageId":"110","endLine":9,"endColumn":19},{"ruleId":"107","severity":1,"message":"116","line":10,"column":8,"nodeType":"109","messageId":"110","endLine":10,"endColumn":16},{"ruleId":"107","severity":1,"message":"117","line":11,"column":8,"nodeType":"109","messageId":"110","endLine":11,"endColumn":14},{"ruleId":"107","severity":1,"message":"118","line":12,"column":8,"nodeType":"109","messageId":"110","endLine":12,"endColumn":18},{"ruleId":"107","severity":1,"message":"119","line":13,"column":8,"nodeType":"109","messageId":"110","endLine":13,"endColumn":18},{"ruleId":"107","severity":1,"message":"120","line":15,"column":8,"nodeType":"109","messageId":"110","endLine":15,"endColumn":20},{"ruleId":"107","severity":1,"message":"121","line":16,"column":8,"nodeType":"109","messageId":"110","endLine":16,"endColumn":17},{"ruleId":"107","severity":1,"message":"122","line":17,"column":8,"nodeType":"109","messageId":"110","endLine":17,"endColumn":22},{"ruleId":"107","severity":1,"message":"123","line":18,"column":8,"nodeType":"109","messageId":"110","endLine":18,"endColumn":20},{"ruleId":"107","severity":1,"message":"124","line":20,"column":8,"nodeType":"109","messageId":"110","endLine":20,"endColumn":17},{"ruleId":"107","severity":1,"message":"125","line":59,"column":9,"nodeType":"109","messageId":"110","endLine":59,"endColumn":26},{"ruleId":"107","severity":1,"message":"126","line":1,"column":20,"nodeType":"109","messageId":"110","endLine":1,"endColumn":29},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],["127"],["128"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkInput'. Either include it or remove the dependency array.","ArrayExpression",["129"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["130"],"React Hook useEffect has a missing dependency: 'employees'. Either include it or remove the dependency array. You can also do a functional update 'setEmployees(e => ...)' if you only need 'employees' in the 'setEmployees' call.",["131"],"no-unused-vars","'clsx' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'CardHeader' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'Avatar' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'FavoriteIcon' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'MoreVertIcon' is defined but never used.","'reactLogo' is defined but never used.","'handleExpandClick' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"132","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [checkInput, first, last, quote]",{"range":"137","text":"138"},{"range":"139","text":"138"},"Update the dependencies array to be: [addEmployee, employees]",{"range":"140","text":"141"},[2379,2399],"[checkInput, first, last, quote]",[2723,2743],[4859,4872],"[addEmployee, employees]"]