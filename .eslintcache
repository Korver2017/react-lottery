[{"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js":"1","C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js":"2","C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js":"4","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js":"5","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js":"6","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\AddEmployeeModal.js":"7","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\EditEmployeeModal.js":"8","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\DeleteEmployeeModal.js":"9","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Prizes.js":"10","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Header.js":"11","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Employees.js":"12","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\const.js":"13"},{"size":624,"mtime":1612034986658,"results":"14","hashOfConfig":"15"},{"size":869,"mtime":1612035487093,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1611280843184,"results":"17","hashOfConfig":"15"},{"size":827,"mtime":1615823696436,"results":"18","hashOfConfig":"19"},{"size":538,"mtime":1617183187894,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1613409601397,"results":"21","hashOfConfig":"19"},{"size":5884,"mtime":1616383115987,"results":"22","hashOfConfig":"19"},{"size":6068,"mtime":1616383050616,"results":"23","hashOfConfig":"19"},{"size":3217,"mtime":1616366365753,"results":"24","hashOfConfig":"19"},{"size":6891,"mtime":1617361283022,"results":"25","hashOfConfig":"19"},{"size":1877,"mtime":1617183176008,"results":"26","hashOfConfig":"19"},{"size":6518,"mtime":1617355819849,"results":"27","hashOfConfig":"19"},{"size":636,"mtime":1617361379818,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1thhyc2",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"129a7ln",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js",[],"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js",[],"C:\\Users\\user\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js",[],["59","60"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\index.js",[],["61","62"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\App.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\AddEmployeeModal.js",["63","64"],"/**\r\n *\r\n * JavaScript Plugin\r\n *\r\n */\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n/**\r\n *\r\n * React & Components\r\n *\r\n */\r\nimport { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n\r\n/**\r\n *\r\n * Styles Settings\r\n *\r\n */\r\nconst useStyles = makeStyles (theme => ({\r\n  form: {\r\n    margin: theme.spacing (1),\r\n  },\r\n  textInput: {\r\n    width: 200,\r\n    margin: theme.spacing (1),\r\n  },\r\n  buttonGroup: {\r\n    marginBottom: theme.spacing (2),\r\n    marginRight: theme.spacing (3),\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    borderColor: theme.palette.error.main,\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    borderColor: theme.palette.success.main,\r\n  }\r\n}));\r\n\r\n\r\n/**\r\n *\r\n * Employee Add Modal\r\n *\r\n */\r\nfunction EmployeeAddModal ({showModal, handleToggleModal, handleAddEmployee}) {\r\n\r\n  // Apply styles.\r\n  const classes = useStyles ();\r\n  const theme = useTheme ();\r\n  const fullScreen = useMediaQuery (theme.breakpoints.down ('sm'));\r\n\r\n  // Initialize employee's data to be added.\r\n  const [first, setFirst] = useState ('');\r\n  const [last, setLast] = useState ('');\r\n  const [quote, setQuote] = useState ('');\r\n\r\n  // State of watching input columns.\r\n  const [watchInput, setWatchInput] = useState (false);\r\n\r\n  // State of deny submit.\r\n  const [denyUpdate, setDenyUpdate] = useState (true);\r\n\r\n\r\n  /**\r\n   *\r\n   * Check input columns to confirm submit\r\n   *\r\n   */\r\n  const checkInput = () => {\r\n    \r\n    // Any empty input, deny submit.\r\n    if (! first.trim () || ! last.trim () || ! quote.trim ())\r\n      return setDenyUpdate (true);\r\n\r\n    else\r\n      return setDenyUpdate (false);\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Check Input Columns\r\n   *\r\n   */\r\n  useEffect (() => {\r\n\r\n    // When columns changed, check input.\r\n    checkInput ();\r\n  }, [first, last, quote]);\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Update Employee\r\n   *\r\n   */\r\n  const handleUpdateEmployee = () => {\r\n\r\n    // Trigger watching input after deny submit.\r\n    if (denyUpdate)\r\n      return setWatchInput (true);\r\n\r\n    // Add new employee.\r\n    handleAddEmployee ({name: {first, last}, quote, id: uuidv4 ()});\r\n\r\n    // Close modal.\r\n    handleCloseModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Reset Data When Closing Modal\r\n   *\r\n   */\r\n  const handleCloseModal = () => {\r\n\r\n    // Reset inputs.\r\n    setFirst ('');\r\n    setLast ('');\r\n    setQuote ('');\r\n\r\n    // Reset watcher & deny state.\r\n    setWatchInput (false);\r\n    setDenyUpdate (true);\r\n\r\n    // Close modal.\r\n    handleToggleModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Input Change\r\n   *\r\n   */\r\n  const handleInputChange = (e, column) => {\r\n\r\n    // Watching column, give it a new value.\r\n    switch (column) {\r\n\r\n      case 'first':\r\n        return setFirst (e.target.value);\r\n\r\n      case 'last':\r\n        return setLast (e.target.value);\r\n\r\n      case 'quote':\r\n        return setQuote (e.target.value);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * JSX\r\n   *\r\n   */\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={showModal}\r\n      onClose={handleCloseModal}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n    >\r\n      \r\n      <DialogTitle id=\"responsive-dialog-title\">\r\n        Add New Employee\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <DialogContentText component={'span'}>\r\n          \r\n          <form noValidate autoComplete=\"off\">\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'first')}}\r\n                error={watchInput && ! first.trim ()}\r\n                className={classes.textInput}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"First Name\"\r\n                helperText={watchInput && ! first.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'last')}}\r\n                className={classes.textInput}\r\n                error={watchInput && ! last.trim ()}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"Last Name\"\r\n                helperText={watchInput && ! last.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n\r\n          <form className={classes.form}>\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'quote')}}\r\n                error={watchInput && ! quote.trim ()}\r\n                fullWidth\r\n                id=\"outlined-multiline-static\"\r\n                label=\"My Declaration\"\r\n                multiline\r\n                rows={4}\r\n                helperText={watchInput && ! quote.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n\r\n      <DialogActions className={classes.buttonGroup}>\r\n        <Button className={classes.success} onClick={handleUpdateEmployee} variant=\"outlined\" color=\"primary\">\r\n          Add\r\n        </Button>\r\n\r\n        <Button className={classes.error} onClick={handleCloseModal} variant=\"outlined\" color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n};\r\n\r\nexport default EmployeeAddModal;\r\n","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\EditEmployeeModal.js",["65","66"],"/**\r\n *\r\n * React & Components\r\n *\r\n */\r\nimport { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n\r\n/**\r\n *\r\n * Styles Settings\r\n *\r\n */\r\nconst useStyles = makeStyles (theme => ({\r\n  form: {\r\n    margin: theme.spacing (1),\r\n  },\r\n  textInput: {\r\n    width: 200,\r\n    margin: theme.spacing (1),\r\n  },\r\n  buttonGroup: {\r\n    marginBottom: theme.spacing (2),\r\n    marginRight: theme.spacing (3),\r\n  },\r\n  error: {\r\n    color: theme.palette.error.main,\r\n    borderColor: theme.palette.error.main,\r\n  },\r\n  success: {\r\n    color: theme.palette.success.main,\r\n    borderColor: theme.palette.success.main,\r\n  }\r\n}));\r\n\r\n\r\n/**\r\n *\r\n * Employee Edit Modal Component\r\n *\r\n */\r\nfunction EditEmployeeModal ({target, handleEditEmployee}) {\r\n\r\n  // Apply styles.\r\n  const classes = useStyles ();\r\n  const theme = useTheme ();\r\n  const fullScreen = useMediaQuery (theme.breakpoints.down ('sm'));\r\n  \r\n  // State of open modal.\r\n  const [open, setOpen] = useState (false);\r\n\r\n  // Initialize employee's data to be edited.\r\n  const [first, setFirst] = useState ('');\r\n  const [last, setLast] = useState ('');\r\n  const [quote, setQuote] = useState ('');\r\n\r\n  // State of deny submit.\r\n  const [denyUpdate, setDenyUpdate] = useState (false);\r\n\r\n\r\n  /**\r\n   *\r\n   * Check input columns to confirm submit\r\n   *\r\n   */\r\n  const checkInput = () => {\r\n    \r\n    // Any empty input, deny submit.\r\n    if (! first.trim () || ! last.trim () || ! quote.trim ())\r\n      return setDenyUpdate (true);\r\n\r\n    else\r\n      return setDenyUpdate (false);\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Close Modal\r\n   *\r\n   */\r\n  const handleCloseModal = () => setOpen (false);\r\n\r\n\r\n  /**\r\n   *\r\n   * Initialize Modal Component\r\n   *\r\n   */\r\n  useEffect (() => {\r\n    \r\n    // Check target employee's data to show modal.\r\n    if (Object.keys (target).length <= 0)\r\n      return;\r\n\r\n    // Set up employee props data, then show lightbox.\r\n    setFirst (target.name.first);\r\n    setLast (target.name.last);\r\n    setQuote (target.quote);\r\n\r\n    // Open modal.\r\n    setOpen (true);\r\n    \r\n  }, [target]);\r\n\r\n\r\n  /**\r\n   *\r\n   * Check Input Columns\r\n   *\r\n   */\r\n  useEffect (() => {\r\n\r\n    // When columns changed, check input.\r\n    checkInput ();\r\n  }, [first, last, quote]);\r\n\r\n\r\n  /**\r\n   *\r\n   * Handle Input Change\r\n   *\r\n   */\r\n  const handleInputChange = (e, column) => {\r\n\r\n    // Watching column, give it a new value.\r\n    switch (column) {\r\n\r\n      case 'first':\r\n        return setFirst (e.target.value);\r\n\r\n      case 'last':\r\n        return setLast (e.target.value);\r\n\r\n      case 'quote':\r\n        return setQuote (e.target.value);\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   *\r\n   * Handle Update Employee\r\n   *\r\n   */\r\n  const handleUpdateEmployee = () => {\r\n\r\n    // Before submit, check deny or not.\r\n    if (denyUpdate)\r\n      return;\r\n    \r\n    // Submit new values.\r\n    handleEditEmployee ({name: {first, last,}, quote});\r\n\r\n    // Close modal.\r\n    handleCloseModal ();\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * JSX\r\n   *\r\n   */\r\n\r\n  // Render component after getting target employee's data.\r\n  if (Object.keys (target).length <= 0)\r\n    return <></>\r\n    \r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open={open}\r\n      onClose={handleCloseModal}\r\n      aria-labelledby=\"responsive-dialog-title\"\r\n    >\r\n      \r\n      <DialogTitle id=\"responsive-dialog-title\">\r\n        {target.name.first + ' ' + target.name.last}\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <DialogContentText component={'span'}>\r\n          \r\n          <form noValidate autoComplete=\"off\">\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'first')}}\r\n                error={! first.trim ()}\r\n                className={classes.textInput}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"First Name\"\r\n                defaultValue={first}\r\n                helperText={! first.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'last')}}\r\n                className={classes.textInput}\r\n                error={! last.trim ()}\r\n                id=\"outlined-error-helper-text\"\r\n                label=\"Last Name\"\r\n                defaultValue={last}\r\n                helperText={! last.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n\r\n          <form className={classes.form}>\r\n            <div>\r\n              <TextField\r\n                onChange={(e) => {handleInputChange (e, 'quote')}}\r\n                error={! quote.trim ()}\r\n                fullWidth\r\n                id=\"outlined-multiline-static\"\r\n                label=\"My Declaration\"\r\n                multiline\r\n                rows={4}\r\n                defaultValue={quote}\r\n                helperText={! quote.trim () ? \"Field may not be empty.\" : ''}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n\r\n      <DialogActions className={classes.buttonGroup}>\r\n        <Button className={classes.success} autoFocus onClick={handleUpdateEmployee} disabled={denyUpdate} variant=\"outlined\">\r\n          Update\r\n        </Button>\r\n        \r\n        <Button className={classes.error} onClick={handleCloseModal} variant=\"outlined\" autoFocus>\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default EditEmployeeModal;\r\n","C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\modal\\DeleteEmployeeModal.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Prizes.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Header.js",[],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\components\\Employees.js",["67"],"C:\\Users\\User\\Desktop\\Projects\\react_year_end_raffle\\src\\const.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"68","replacedBy":"72"},{"ruleId":"70","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":106,"column":6,"nodeType":"76","endLine":106,"endColumn":26,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":157,"column":5,"nodeType":"80","messageId":"81","endLine":167,"endColumn":6},{"ruleId":"74","severity":1,"message":"75","line":125,"column":6,"nodeType":"76","endLine":125,"endColumn":26,"suggestions":"82"},{"ruleId":"78","severity":1,"message":"79","line":136,"column":5,"nodeType":"80","messageId":"81","endLine":146,"endColumn":6},{"ruleId":"74","severity":1,"message":"83","line":231,"column":6,"nodeType":"76","endLine":231,"endColumn":19,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],["85"],["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkInput'. Either include it or remove the dependency array.","ArrayExpression",["87"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["88"],"React Hook useEffect has a missing dependency: 'employees'. Either include it or remove the dependency array. You can also do a functional update 'setEmployees(e => ...)' if you only need 'employees' in the 'setEmployees' call.",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"90","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [checkInput, first, last, quote]",{"range":"95","text":"96"},{"range":"97","text":"96"},"Update the dependencies array to be: [addEmployee, employees]",{"range":"98","text":"99"},[2379,2399],"[checkInput, first, last, quote]",[2723,2743],[4823,4836],"[addEmployee, employees]"]